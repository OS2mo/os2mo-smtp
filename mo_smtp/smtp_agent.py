from typing import Any

import structlog
from fastapi import APIRouter
from fastapi import FastAPI
from fastramqpi.main import FastRAMQPI
from ramqp.mo import MOAMQPSystem
from ramqp.mo import MORouter

from .agents import amqp_router
from .autogenerated_graphql_client import GraphQLClient
from .config import EmailSettings
from .config import Settings
from .mail import EmailClient

logger = structlog.get_logger()
fastapi_router = APIRouter()


def register_agents(
    amqp_router: MORouter,
    amqpsystem: MOAMQPSystem,
    agents_to_register: list[str],
):
    """
    Register agents so they listen to AMQP messages

    Only registers agents listed in agents_to_register
    """
    for registry_entry, routing_keys in amqp_router.registry.items():
        agent_name = registry_entry.__name__
        if agent_name in agents_to_register:
            amqpsystem.router.registry.update({registry_entry: routing_keys})


def create_fastramqpi(**kwargs: Any) -> FastRAMQPI:
    """
    Initiate a FastRAMQPI instance.
    """

    logger.info("Import settings")
    settings = Settings(**kwargs)
    email_settings = EmailSettings(**kwargs)

    logger.info("FastRAMQPI setup")
    fastramqpi = FastRAMQPI(
        application_name=settings.application_name,
        settings=settings.fastramqpi,
        graphql_client_cls=GraphQLClient,  # type: ignore
    )
    fastramqpi.add_context(settings=settings)
    fastramqpi.add_context(email_settings=email_settings)

    logger.info("Initializing email client")
    email_client = EmailClient(fastramqpi.get_context())
    fastramqpi.add_context(email_client=email_client)

    logger.info("AMQP router setup")
    amqpsystem = fastramqpi.get_amqpsystem()
    register_agents(amqp_router, amqpsystem, settings.active_agents)

    app = fastramqpi.get_app()
    app.include_router(fastapi_router)

    # Handle bug in fastRAMQP
    # See https://git.magenta.dk/rammearkitektur/FastRAMQPI/-/merge_requests/91
    app.contact["email"] = "info@magenta.dk"  # type: ignore

    @app.post("/send_test_email", status_code=202, tags=["Test"])
    async def send_test_mail(receiver: str):
        """
        Send a test email using the settings in config.py
        """
        email_client.send_email(
            receiver={receiver},
            subject="Test mail from OS2MO-smtp agent",
            body="If you see this mail, the test has succeeded",
            texttype="plain",
        )

    return fastramqpi


def create_app(**kwargs: Any) -> FastAPI:
    fastramqpi = create_fastramqpi(**kwargs)
    return fastramqpi.get_app()
