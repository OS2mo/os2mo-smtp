import datetime
from datetime import timezone, timedelta

from uuid import uuid4
import pytest

from freezegun import freeze_time

from mo_smtp.helpers import extract_current_or_latest_validity
from mo_smtp.autogenerated_graphql_client.manager_data import (
    ManagerDataManagersObjectsValidities,
)
from mo_smtp.helpers import mo_datestring_to_utc


@pytest.mark.parametrize(
    "validities, expected_uuid",
    [
        # One of the objects is valid today - return it
        (
            [
                ManagerDataManagersObjectsValidities.parse_obj(
                    {
                        "validity": {
                            "from": datetime.datetime(2022, 8, 1),
                            "to": datetime.datetime(2022, 8, 1),
                        },
                        "org_unit_uuid": uuid4(),
                    }
                ),
                (
                    obj2 := ManagerDataManagersObjectsValidities.parse_obj(
                        {
                            "validity": {
                                "from": datetime.datetime(2022, 8, 2),
                                "to": datetime.datetime(2022, 8, 15),
                            },
                            "org_unit_uuid": uuid4(),
                        }
                    )
                ),
                ManagerDataManagersObjectsValidities.parse_obj(
                    {
                        "validity": {
                            "from": datetime.datetime(2022, 8, 15),
                            "to": None,
                        },
                        "org_unit_uuid": uuid4(),
                    }
                ),
            ],
            obj2.org_unit_uuid,
        ),
        # One of the objects is valid today (without to-date) - return it
        (
            [
                ManagerDataManagersObjectsValidities.parse_obj(
                    {
                        "validity": {
                            "from": datetime.datetime(2022, 8, 1),
                            "to": datetime.datetime(2022, 8, 2),
                        },
                        "org_unit_uuid": uuid4(),
                    }
                ),
                (
                    obj2 := ManagerDataManagersObjectsValidities.parse_obj(
                        {
                            "validity": {
                                "from": datetime.datetime(2022, 8, 2),
                                "to": None,
                            },
                            "org_unit_uuid": uuid4(),
                        }
                    )
                ),
            ],
            obj2.org_unit_uuid,
        ),
        # One of the objects is valid today - return it
        (
            [
                (
                    obj1 := ManagerDataManagersObjectsValidities.parse_obj(
                        {
                            "validity": {
                                "from": datetime.datetime(2022, 8, 1),
                                "to": datetime.datetime(2022, 8, 15),
                            },
                            "org_unit_uuid": uuid4(),
                        }
                    )
                ),
                ManagerDataManagersObjectsValidities.parse_obj(
                    {
                        "validity": {
                            "from": datetime.datetime(2022, 8, 15),
                            "to": None,
                        },
                        "org_unit_uuid": uuid4(),
                    }
                ),
            ],
            obj1.org_unit_uuid,
        ),
        # No object is valid today - return the latest
        (
            [
                ManagerDataManagersObjectsValidities.parse_obj(
                    {
                        "validity": {
                            "from": datetime.datetime(2022, 8, 1),
                            "to": datetime.datetime(2022, 8, 2),
                        },
                        "org_unit_uuid": uuid4(),
                    }
                ),
                (
                    obj2 := ManagerDataManagersObjectsValidities.parse_obj(
                        {
                            "validity": {
                                "from": datetime.datetime(2022, 8, 15),
                                "to": None,
                            },
                            "org_unit_uuid": uuid4(),
                        }
                    )
                ),
            ],
            obj2.org_unit_uuid,
        ),
        # No object is valid today - return the latest
        (
            [
                ManagerDataManagersObjectsValidities.parse_obj(
                    {
                        "validity": {
                            "from": datetime.datetime(2022, 8, 1),
                            "to": datetime.datetime(2022, 8, 2),
                        },
                        "org_unit_uuid": uuid4(),
                    }
                ),
                (
                    obj2 := ManagerDataManagersObjectsValidities.parse_obj(
                        {
                            "validity": {
                                "from": datetime.datetime(2022, 8, 15),
                                "to": datetime.datetime(2022, 8, 20),
                            },
                            "org_unit_uuid": uuid4(),
                        }
                    )
                ),
            ],
            obj2.org_unit_uuid,
        ),
    ],
)
@freeze_time("2022-08-10")
def test_extract_latest_object(validities, expected_uuid):
    assert extract_current_or_latest_validity(validities).org_unit_uuid == expected_uuid


@pytest.mark.parametrize("validities", [[]])
@freeze_time("2022-08-10")
def test_extract_latest_object_raises(validities):
    # Use pytest.raises to check for the exception
    with pytest.raises(Exception, match="Validities is empty"):
        extract_current_or_latest_validity(validities)


def test_mo_datestring_to_utc():
    datetime_obj = datetime.datetime(2022, 8, 15, tzinfo=timezone(timedelta(hours=1)))

    assert mo_datestring_to_utc(datetime_obj) == datetime.datetime(2022, 8, 15)
    assert mo_datestring_to_utc(None) is None
